---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: v1-validator1 # +operator-builder:field:parent=metadata.name,type=string
  namespace: default # +operator-builder:collection:field:parent=metadata.name,type=string
spec:
  selector:
    matchLabels:
      app: v1-validator1 # +operator-builder:field:parent=metadata.name,type=string
  serviceName: v1-validator1 # +operator-builder:field:parent=metadata.name,type=string
  replicas: 1 # we can't really scale validators, because of 1:1 relationship with the private key
  template:
    metadata:
      annotations:
        # +operator-builder:field:name=prometheusScrape,type=bool,replace="false",default=false
        prometheus.io/scrape: "false"
        prometheus.io/port: "9000"
      labels:
        app: v1-validator1 # +operator-builder:field:parent=metadata.name,type=string
        v1-purpose: validator
    spec:
      containers:
        - name: pocket-validator
          image: ghcr.io/pokt-network/pocket-v1:main-dev # +operator-builder:field:name=pocketImage,type=string
          args:
            - pocket
            - -config=/configs/config.json
            - -genesis=/genesis.json
          ports:
            - containerPort: 8080 # +operator-builder:field:name=ports.consensus,type=int,default=8080
              name: consensus
            - containerPort: 50832 # +operator-builder:field:name=ports.rpc,type=int,default=50832
              name: rpc
          env:
            - name: POCKET_BASE_PRIVATE_KEY
              valueFrom:
                secretKeyRef:
                  name: v1-validator1 # +operator-builder:field:name=privateKey.secretKeyRef.name,type=string
                  key: private_key # +operator-builder:field:name=privateKey.secretKeyRef.key,type=string
            - name: POCKET_CONSENSUS_PRIVATE_KEY
              valueFrom:
                secretKeyRef:
                  name: v1-validator1 # +operator-builder:field:name=privateKey.secretKeyRef.name,type=string
                  key: private_key # +operator-builder:field:name=privateKey.secretKeyRef.key,type=string
            - name: POCKET_P2P_PRIVATE_KEY
              valueFrom:
                secretKeyRef:
                  name: v1-validator1 # +operator-builder:field:name=privateKey.secretKeyRef.name,type=string
                  key: private_key # +operator-builder:field:name=privateKey.secretKeyRef.key,type=string
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: postgres-credentials # +operator-builder:field:name=postgres.user.secretKeyRef.name,type=string
                  key: username # +operator-builder:field:name=postgres.user.secretKeyRef.key,type=string
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-credentials # +operator-builder:field:name=postgres.password.secretKeyRef.name,type=string
                  key: postgres-password # +operator-builder:field:name=postgres.password.secretKeyRef.key,type=string
              # TODO(@okdas): switch to `valueFrom`, which allows for a secretKeyRef and configMapKeyRef
            - name: POSTGRES_HOST
              value: postgres-host # +operator-builder:field:name=postgres.host,type=string
              # TODO(@okdas): switch to `valueFrom`, which allows for a secretKeyRef and configMapKeyRef
            - name: POSTGRES_PORT
              value: "5432" # +operator-builder:field:name=postgres.port,type=string
              # TODO(@okdas): switch to `valueFrom`, which allows for a secretKeyRef and configMapKeyRef
            - name: POSTGRES_DB
              value: "validatordb" # +operator-builder:field:name=postgres.database,type=string,default="validatordb"
            - name: POCKET_PERSISTENCE_POSTGRES_URL
              value: "postgres://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@$(POSTGRES_HOST):$(POSTGRES_PORT)/$(POSTGRES_DB)"
            - name: POCKET_PERSISTENCE_NODE_SCHEMA
              value: v1-validator1 # +operator-builder:field:name=postgres.schema,type=string,default="v1-validator1"
          volumeMounts:
            - name: config-volume
              mountPath: /configs
            - name: genesis-volume
              mountPath: /genesis.json
              subPath: genesis.json
            - name: validator-storage # +operator-builder:field:parent=metadata.name,replace="name",type=string
              mountPath: /validator-storage
      volumes:
        - name: config-volume
          configMap:
            name: name-config # +operator-builder:field:parent=metadata.name,replace="name",type=string
        - name: genesis-volume
          configMap:
            name: name-genesis # +operator-builder:collection:field:parent=metadata.name,replace="name",type=string
  volumeClaimTemplates:
    - metadata:
        name: validator-storage # +operator-builder:field:parent=metadata.name,replace="name",type=string
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: v1-validator1 # +operator-builder:field:parent=metadata.name,type=string
  namespace: default # +operator-builder:collection:field:parent=metadata.name,type=string
  labels:
    app: v1-validator1 # +operator-builder:field:parent=metadata.name,type=string
spec:
  ports:
    - port: 8080 # +operator-builder:field:name=ports.consensus,type=int,default=8080
      name: consensus
      protocol: TCP
      targetPort: consensus
    - port: 50832 # +operator-builder:field:name=ports.rpc,type=int,default=50832
      name: rpc
      protocol: TCP
      targetPort: rpc
  selector:
    app: v1-validator1 # +operator-builder:field:parent=metadata.name,type=string
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: name-config # +operator-builder:field:parent=metadata.name,type=string,replace="name"
  namespace: default # +operator-builder:collection:field:parent=metadata.name,type=string
data:
  # +operator-builder:field:name=ports.consensus,type=int,replace="consensus_port_value",default="8080"
  # +operator-builder:field:name=ports.rpc,type=int,replace="rpc_port_value",default="50832"
  config.json: |
    {
      "root_directory": "/go/src/github.com/pocket-network",
      "private_key": "",
      "consensus": {
        "max_mempool_bytes": 500000000,
        "pacemaker_config": {
          "timeout_msec": 5000,
          "manual": true,
          "debug_time_between_steps_msec": 1000
        },
        "private_key": ""
      },
      "utility": {
        "max_mempool_transaction_bytes": 1073741824,
        "max_mempool_transactions": 9000
      },
      "persistence": {
        "postgres_url": "",
        "node_schema": "validator",
        "block_store_path": "/validator-storage/blockstore",
        "tx_indexer_path": "",
        "trees_store_dir": "/validator-storage/trees",
        "max_conns_count": 8,
        "min_conns_count": 0,
        "max_conn_lifetime": "1h",
        "max_conn_idle_time": "30m",
        "health_check_period": "5m"
      },
      "p2p": {
        "consensus_port": consensus_port_value,
        "use_rain_tree": true,
        "is_empty_connection_type": false,
        "private_key": "",
        "max_mempool_count": 100000
      },
      "telemetry": {
        "enabled": true,
        "address": "0.0.0.0:9000",
        "endpoint": "/metrics"
      },
      "logger": {
        "level": "debug",
        "format": "json"
      },
      "rpc": {
        "enabled": true,
        "port": "rpc_port_value",
        "timeout": 30000,
        "use_cors": false
      }
    }
